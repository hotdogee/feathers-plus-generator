// Configure authentication. (Can be re-generated.)
<%- tplImports('{AuthenticationService,JWTStrategy,AuthenticationBaseStrategy}', '@feathersjs/authentication') %>
<%# -%>
<%# --- if-1 starts below. -%>
<% if(specs.authentication.strategies.indexOf('local') !== -1) { -%>
<%- tplImports('{ LocalStrategy }', '@feathersjs/authentication-local') %>
<% } -%>
<%# --- if-1 ends above. -%>
<%# -%>
<%# --- if-2 starts below. -%>
<% if(oauthProviders.length){ -%>
<%- tplImports('{ OAuthStrategy, setup }', '@feathersjs/authentication-oauth') %>
<% } -%>
<%# --- if-2 ends above. -%>
<%# -%>
<%# --- forEach-3 starts below. -%>
<%# oauthProviders.forEach(provider => { -%>
<%#- tplImports(provider.strategyName, provider.module, 'req') %>
<%# }); -%>
<%# --- forEach-3 ends above. -%>

<%- tplTsOnly([`import { App } from './app.interface'${sc}`, '']) -%>
<%- insertFragment('imports', `
/* eslint-disable no-unused-vars */
const { LocalStrategy } = require('@feathersjs/authentication-local')
const debug = require('debug')('infans:auth')
// const { verifyECDSA, savePublicKey } = require('./hooks/ecdsa')
const { verify } = require('./lib/ecdsa')
// const CustomStrategy = require('passport-custom')
// const { iff } = require('feathers-hooks-common')
const { ObjectID } = require('mongodb')
// const bcrypt = require('bcryptjs')
const { omit, merge, get } = require('lodash')
const safeStringify = require('fast-safe-stringify')
const querystring = require('querystring')
const axios = require('axios')
const request = require('request-compose').extend({
  Request: { oauth: require('request-oauth') }
}).client

const {
  getDefaultSettings
} = require('@feathersjs/authentication-oauth/lib/utils')
const { express } = require('grant')
const { original } = require('@feathersjs/express')
const qs = require('querystring')
const {
  FeathersError,
  BadRequest,
  NotAuthenticated,
  PaymentError,
  Forbidden,
  NotFound,
  MethodNotAllowed,
  NotAcceptable,
  Timeout,
  Conflict,
  LengthRequired,
  Unprocessable,
  TooManyRequests,
  GeneralError,
  NotImplemented,
  BadGateway,
  Unavailable
} = require('@feathersjs/errors')
/* eslint-enable no-unused-vars */
`) %>
<%- insertFragment('init', `
class ECDSAStrategy extends AuthenticationBaseStrategy {
  get configuration () {
    const authConfig = this.authentication.configuration
    const config = super.configuration || {}

    return {
      service: authConfig.service,
      entity: authConfig.entity,
      entityId: authConfig.entityId,
      errorMessage: 'Invalid login',
      ...config
    }
  }

  async getEntity (id, params) {
    const { entity } = this.authentication.configuration
    const entityService = this.entityService
    if (entityService === null) {
      throw new NotAuthenticated(\`Could not find entity service\`)
    }
    const result = await entityService.get(id, omit(params, 'provider'))
    if (!params.provider) {
      return result
    }
    return entityService.get(id, { ...params, [entity]: result })
  }

  async authenticate (authentication, params) {
    // const authentication = {
    //   strategy: 'ecdsa',
    //   signature: btoa(String.fromCharCode(...new Uint8Array(signature))),
    //   document: {
    //     payload: {
    //       userId: state.user._id
    //     },
    //     publicKey: JSON.stringify(publicKey),
    //     timestamp: new Date(),
    //     // timestamp: new Date('2018-11-06T07:34:20.671Z'),
    //     userAgent: navigator.userAgent
    //   }
    // }
    const { signature, document } = authentication
    const valid = await verify(signature, document)
    if (!valid) {
      // this
      debug(\`ECDSA signature verification failed\`)
      throw new NotAuthenticated(\`ECDSA signature verification failed\`)
    }

    const {
      publicKey,
      payload: { userId }
    } = document
    if (!userId) {
      debug(\`No user id\`)
      throw new NotAuthenticated('No user id')
    }
    if (!publicKey) {
      debug(\`No public key\`)
      throw new NotAuthenticated('No public key')
    }

    const query = {
      _id: publicKey,
      userId: new ObjectID(userId)
    }
    debug('ECDSAStrategy public-keys query = ', query)
    const keyService = this.app.service('public-keys')
    // const keyParams = Object.assign({}, params, { query })
    // debug('ECDSAStrategy public-keys params = ', keyParams)
    const result = await keyService.find({ query })
    debug('ECDSAStrategy public-keys result = ', result)
    const list = Array.isArray(result) ? result : result.data
    if (!Array.isArray(list) || list.length === 0) {
      debug(\`No public key found\`)
      throw new NotAuthenticated('Invalid login')
    }

    // debug('ECDSAStrategy authentication.configuration = ', this.authentication, this.authentication.configuration)
    const { entity } = this.authentication.configuration
    const user = await this.getEntity(query.userId, params)
    debug('ECDSAStrategy user = ', user)

    // authResult = {
    //   authentication: { strategy: name },
    //   user: User
    // }
    return {
      authentication: { strategy: this.name },
      [entity]: user
    }
  }
}

// class AnonymousStrategy extends AuthenticationBaseStrategy {
//   authenticate (authentication, params) {
//     return {
//       anonymous: true
//     }
//   }
// }

class MultiAccountLocalStrategy extends LocalStrategy {
  async findEntity (username, params) {
    const { entityUsernameField, service, errorMessage } = this.configuration
    const query = await this.getEntityQuery(
      {
        [entityUsernameField]: username
      },
      params
    )
    const findParams = Object.assign({}, params, { query })
    const entityService = this.app.service(service)
    debug('Finding entity with query', params.query)
    const result = await entityService.find(findParams)
    const list = Array.isArray(result) ? result : result.data
    if (!Array.isArray(list) || list.length === 0) {
      debug(\`No entity found\`)
      throw new NotAuthenticated(errorMessage)
    }
    const [entity] = list
    return entity
  }

  async authenticate (authentication, params) {
    // const authentication = {
    //   strategy: 'local',
    //   'accounts.value': credentials.email,
    //   password: credentials.password,
    //   signature: btoa(String.fromCharCode(...new Uint8Array(signature))),
    //   document: {
    //     payload: {
    //       'accounts.value': credentials.email
    //     },
    //     publicKey: JSON.stringify(publicKey),
    //     timestamp: new Date(),
    //     // timestamp: new Date('2018-11-06T07:34:20.671Z'),
    //     userAgent: navigator.userAgent
    //   }
    // }
    const { signature, document } = authentication
    const valid = await verify(signature, document)
    if (!valid) {
      // this
      debug(\`ECDSA signature verification failed\`)
      throw new NotAuthenticated(\`ECDSA signature verification failed\`)
    }

    const {
      usernameField,
      passwordField,
      entityId = this.entityService.id,
      entity
    } = this.configuration
    const { publicKey, payload } = document
    const username = payload[usernameField]
    const result = await this.findEntity(username, omit(params, 'provider'))

    const password = authentication[passwordField]
    await this.comparePassword(result, password)

    // savePublicKey
    if (!entityId || !result[entityId]) {
      throw new NotAuthenticated('Could not get local entity')
    }
    const keyService = this.app.service('public-keys')
    keyService.create({
      _id: publicKey,
      document: safeStringify(document),
      signature,
      userId: result[entityId]
    })

    return {
      authentication: { strategy: this.name },
      [entity]: await this.getEntity(result, params)
    }
  }
}

class MultiAccountOAuthStrategy extends OAuthStrategy {
  // const data = {
  //   accounts: [
  //     {
  //       type: 'email',
  //       value: credentials.email
  //     }
  //   ],
  //   password: credentials.password,
  //   recaptchaToken: credentials.recaptchaToken,
  //   locale: rootGetters['localSettings/locale'],
  //   signature: btoa(String.fromCharCode(...new Uint8Array(signature))),
  //   document
  // }

  async getRedirect (data) {
    const { redirect } = this.authentication.configuration.oauth

    if (!redirect) {
      return null
    }

    const separator = redirect.endsWith('?') ? '' : '#'
    const authResult = data
    const query = authResult.accessToken
      ? {
        access_token: authResult.accessToken
      }
      : {
        error: data.message || 'OAuth Authentication not successful'
      }

    return redirect + separator + querystring.stringify(query)
  }

  async getEntityQuery (profile, params) {
    return {
      'accounts.type': this.name,
      'accounts.value': profile.sub || profile.id
    }
  }

  async findEntity (profile, params) {
    // add
    const query = await this.getEntityQuery(profile, params)

    debug('findEntity with query', query)

    const result = await this.entityService.find({
      ...params,
      query
    })
    const [entity = null] = result.data ? result.data : result

    debug('findEntity returning', entity)

    return entity
  }

  async getCurrentEntity (params) {
    // if /oauth/google?token=JWT
    // get entity using jwt strategy
    const { authentication } = params
    const { entity } = this.configuration

    if (authentication && authentication.strategy) {
      debug('getCurrentEntity with authentication', authentication)

      const { strategy } = authentication
      const authResult = await this.authentication.authenticate(
        authentication,
        params,
        strategy
      )

      return authResult[entity]
    }

    return null
  }

  async getEntityData (profile, entity, params) {
    const account = {
      type: this.name,
      value: profile.sub || profile.id,
      ...profile
    }
    if (entity) {
      const i = entity.accounts.findIndex(
        (v) => v.type === account.type && v.value === account.value
      )
      debug(\`getEntityData\`, i, entity.accounts, account)
      if (i === -1) {
        // create new account in entity
        return {
          accounts: [...entity.accounts, account]
        }
      } else {
        // update existing account in entity
        entity.accounts[i] = account
        return {
          accounts: entity.accounts
        }
      }
    } else {
      // create entity
      return {
        accounts: [account]
      }
    }
  }

  async createEntity (profile, params) {
    const data = await this.getEntityData(profile, null, params)

    debug('createEntity with data', data)

    return this.entityService.create(data, params)
  }

  async updateEntity (entity, profile, params) {
    const id = entity[this.entityId]
    const data = await this.getEntityData(profile, entity, params)

    debug(\`updateEntity with id \${id} and data\`, data)

    return this.entityService.patch(id, data, params)
  }

  async getProfile (data, params) {
    const config = this.app.get('grant')
    const provider = config[data.strategy]

    debug('get oAuth profile with', data, provider)

    if (provider.name === 'line') {
      // eslint-disable-next-line camelcase
      const { id_token: idToken = {} } = data
      const { payload = {} } = idToken
      return {
        sub: payload.sub,
        name: payload.name,
        picture: payload.picture,
        email: payload.email
      }
    } else if (provider.name === 'twitter') {
      // OAuth oauth_consumer_key="dCGPMs0y2Sbt8PlET5t1ToGJ6",oauth_token="65576906-OSHnCHVNxkFnvjUHtKcawOVIABkyANRpVvIyxcITu",oauth_signature_method="HMAC-SHA1",oauth_timestamp="1561920564",oauth_nonce="rLa1ciqJP7i",oauth_version="1.0",oauth_signature="PeVfrMYjc3pJTNGTV541alYawWU%3D"
      const { body } = await request({
        url: this.configuration.profileUrl,
        oauth: {
          consumer_key: provider.key,
          consumer_secret: provider.secret,
          token: data.access_token,
          token_secret: data.access_secret
        }
      })
      // debug('twitter profile', body)
      return body
    } else {
      return (await axios({
        method: 'get',
        url: this.configuration.profileUrl,
        headers: { Authorization: \`Bearer \${data.access_token}\` }
      })).data
    }
  }

  async authenticate (authentication, params) {
    const entityField = this.configuration.entity // user
    const profile = await this.getProfile(authentication, params)
    const tokenEntity = await this.getCurrentEntity(params)
    const oauthEntity = await this.findEntity(profile, params)
    let entity = null
    if (tokenEntity) {
      // adding oauth account to current entity
      debug(\`adding oauth account to current entity\`, tokenEntity)
      if (oauthEntity) {
        throw new BadRequest(
          \`Could not add \${
            this.name
          } account, already associated with another user\`
        )
      }
      // push entity.accounts
      entity = await this.updateEntity(tokenEntity, profile, params)
    } else {
      // new sign in
      if (oauthEntity) {
        // update existing entity with current profile
        debug(\`update existing entity with current profile\`, oauthEntity)
        entity = await this.updateEntity(oauthEntity, profile, params)
      } else {
        // create new entity
        debug(\`create new entity\`, profile)
        entity = await this.createEntity(profile, params)
      }
    }

    debug(\`result entity\`, entity)

    return {
      authentication: { strategy: this.name, oauth: true },
      [entityField]: entity
    }
  }
}

class ECDSAAuthenticationService extends AuthenticationService {
  /**
   * Return the payload for a JWT based on the authentication result.
   * Called internally by the \`create\` method.
   * @param _authResult The current authentication result
   * @param params The service call parameters
   */
  // async getPayload (authResult, params) {
  //   // Call original \`getPayload\` first
  //   const payload = await super.getPayload(authResult, params)
  //   const { user } = authResult

  //   if (user && user.permissions) {
  //     payload.permissions = user.permissions
  //   }

  //   return payload
  // }
  /**
   * Return the payload for a JWT based on the authentication result.
   * Called internally by the \`create\` method.
   * @param _authResult The current authentication result
   * @param params The service call parameters
   */
  async getPayload (_authResult, params) {
    // Uses \`params.payload\` or returns an empty payload
    const { payload = {} } = params

    return payload
  }

  /**
   * Returns the JWT options based on an authentication result.
   * By default sets the JWT subject to the entity id.
   * @param authResult The authentication result
   * @param params Service call parameters
   */
  async getTokenOptions (authResult, params) {
    const { service, entity, entityId } = this.configuration
    const jwtOptions = merge({}, params.jwtOptions, params.jwt)
    const hasEntity = service && entity && authResult[entity]

    // Set the subject to the entity id if it is available
    if (hasEntity && !jwtOptions.subject) {
      const idProperty = entityId || this.app.service(service).id
      const subject = get(authResult, [entity, idProperty])

      if (subject === undefined) {
        throw new NotAuthenticated(
          \`Can not set subject from \${entity}.\${idProperty}\`
        )
      }

      jwtOptions.subject = \`\${subject}\`
    }
    // if oauth
    if (authResult.authentication.oauth) {
      jwtOptions.audience = 'public-keys'
    }

    return jwtOptions
  }

  /**
   * Create and return a new JWT for a given authentication request.
   * Will trigger the \`login\` event.
   * @param data The authentication request (should include \`strategy\` key)
   * @param params Service call parameters
   */
  async create (data, params) {
    const authStrategies =
      params.authStrategies || this.configuration.authStrategies

    if (!authStrategies.length) {
      throw new NotAuthenticated(
        'No authentication strategies allowed for creating a JWT (\`authStrategies\`)'
      )
    }

    const authResult = await this.authenticate(data, params, ...authStrategies)

    debug('Got authentication result', authResult)

    const [payload, jwtOptions] = await Promise.all([
      this.getPayload(authResult, params),
      this.getTokenOptions(authResult, params)
    ])

    if (authResult.accessToken) {
      return authResult
    }

    debug('Creating JWT with', payload, jwtOptions)

    const accessToken = await this.createAccessToken(
      payload,
      jwtOptions,
      params.secret
    )

    return Object.assign({}, { accessToken }, authResult)
  }
}

const setupExpress = (options) => {
  return (feathersApp) => {
    const { authService, linkStrategy } = options
    const app = feathersApp
    const config = app.get('grant')
    const prefixPath = app.get('prefixPath')

    if (!config) {
      debug('No grant configuration found, skipping Express oAuth setup')
      return
    }

    const { path } = config.defaults
    const grantApp = express()(config)
    const authApp = original()

    authApp.use(options.expressSession)

    authApp.get('/:name', (req, res) => {
      const { token, ...query } = req.query

      if (token) {
        debug(\`Got token query parameter to link accounts\`, token)
        req.session.accessToken = token
      }

      debug(
        \`/:name redirect = \`,
        \`\${prefixPath}\${path}/connect/\${req.params.name}?\${qs.stringify(query)}\`
      )
      res.redirect(
        \`\${prefixPath}\${path}/connect/\${req.params.name}?\${qs.stringify(query)}\`
      )
    })

    authApp.get('/:name/callback', (req, res) => {
      debug(
        \`/:name/callback redirect = \`,
        \`\${prefixPath}\${path}/connect/\${
          req.params.name
        }/callback?\${qs.stringify(req.query)}\`
      )
      res.redirect(
        \`\${prefixPath}\${path}/connect/\${
          req.params.name
        }/callback?\${qs.stringify(req.query)}\`
      )
    })

    authApp.get('/:name/authenticate', async (req, res, next) => {
      const { name } = req.params
      const { accessToken, grant } = req.session
      const service = app.service(authService)
      const [strategy] = service.getStrategies(name)
      const sendResponse = async (data) => {
        try {
          const redirect = await strategy.getRedirect(data)

          if (redirect !== null) {
            res.redirect(redirect)
          } else if (data instanceof Error) {
            throw data
          } else {
            res.json(data)
          }
        } catch (error) {
          debug('oAuth error', error)
          next(error)
        }
      }

      try {
        const payload =
          config.defaults.transport === 'session' ? grant.response : req.query

        const params = {
          authStrategies: [name],
          authentication: accessToken
            ? {
              strategy: linkStrategy,
              accessToken
            }
            : null
        }

        const authentication = {
          strategy: name,
          ...payload
        }

        debug(
          \`Calling \${authService}.create authentication with strategy \${name}\`
        )

        const authResult = await service.create(authentication, params)

        debug('Successful oAuth authentication, sending response')

        await sendResponse(authResult)
      } catch (error) {
        debug('Received oAuth authentication error', error.stack)
        await sendResponse(error)
      }
    })

    authApp.use(grantApp)

    app.set('grant', grantApp.config)
    app.use(path, authApp)
  }
}

const grantOauth = (settings = {}) => (app) => {
  const options = getDefaultSettings(app, settings)
  app.configure(setup(options))
  app.configure(setupExpress(options))
}
`) %>

<%- tplModuleExports(null, 'function (app) {', 'function (app: App) {') %>
  const authentication = new ECDSAAuthenticationService(app)<%- sc %>
  <%- insertFragment('func_init') %>

  // Set up authentication with the secret
  authentication.register('jwt', new JWTStrategy())<%- sc %>
  authentication.register('ecdsa', new ECDSAStrategy())<%- sc %><% if(specs.authentication.strategies.indexOf('local') !== -1) { %>
  authentication.register('local', new MultiAccountLocalStrategy())<%- sc %><% } %>
  <%- insertFragment('loc_1') %>
<%# -%>
<%# --- forEach-1 starts below. -%>
<% oauthProviders.forEach(provider => { %>
  authentication.register('<%= provider.name %>', new MultiAccountOAuthStrategy())<%- sc %>
<% }); %>
  <%- insertFragment('user_auth', `app.use('/authentication', authentication)`) %>
  <%- insertFragment('configure_auth', `
  app.configure(
    grantOauth()
    // expressOauth()
    // default = {
    //   authService: 'authentication',
    //   linkStrategy: 'jwt',
    //   expressSession: session({
    //     secret: Math.random().toString(36).substring(7),
    //     saveUninitialized: true,
    //     resave: true
    //   }
    // }
  )`) %>
<%# --- forEach-1 ends above. -%>
  <%- insertFragment('loc_2') %>

  // The `authentication` service is used to create a JWT.
  // The before `create` hook registers strategies that can be used
  // to create a new valid JWT (e.g. local or oauth2)
  app.service('authentication').hooks({
    before: {
      create: [
        <%- insertFragment('before_create', [
          '        // authentication.hooks.authenticate(config.strategies)'
        ]) %>
      ],
      remove: [
        <%- insertFragment('before_remove', [
          '        // authentication.hooks.authenticate(\'jwt\')'
        ]) %>
      <%- insertFragment('before', '      ]') %>
    <%- insertFragment('after', '    }') %>
  })<%- sc %>
  <%- insertFragment('func_return') %>
}<%- sc %>

<%- insertFragment('exports') %>
<%- `${tplExport('moduleExports')}${sc}` %>

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
