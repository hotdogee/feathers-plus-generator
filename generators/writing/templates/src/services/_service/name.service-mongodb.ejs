// Initializes the `<%= serviceName %>` service on path `/<%= path %>`
<%- tplTsOnly([`import { App } from '../../${subFolderReverse}app.interface'${sc}`, '', '']) -%>
<%- tplImports('createService', 'feathers-mongodb', 'req') %>
<%- tplImports('hooks', `./${kebabName}.hooks`) %>
<%- tplTsOnly([`import { Db, MongoClient } from 'mongodb'${sc}`, '']) -%>
<%- insertFragment('imports', [
  `// ${tplImports('$jsonSchema', `./${kebabName}.mongo`, 'req', 'const')}`
]) %>
<%- insertFragment('init') %>

<%- tplModuleExports(null, 'async function (app) {', 'async function (app: App) {') %>
  const db = await app.get('mongoClient')<%- tplTsOnly([' as Db']) -%><%- sc %>
  const Model = await db.createCollection('<%= kebabName %>', {
    <%- insertFragment('create_collection', [
      '      // validator: { $jsonSchema: $jsonSchema },',
      '      // validationLevel: \'strict\', // The MongoDB default',
      '      // validationAction: \'error\', // The MongoDB default',
    ]) %>
  })
  const paginate = app.get('paginate')<%- sc %>
  <%- insertFragment('func_init', `  const options = { Model, paginate, whitelist: [ '$client' ], multi: false }${sc}`) %>

  // Initialize our service with any options it requires
  <%- insertFragment('extend', `  app.use('/${path}', createService(options))${sc}`) %>

  // Get our initialized service so that we can register hooks
  const service = app.service('<%= path %>')<%- sc %>

  service.hooks(hooks)<%- sc %>
  <%- insertFragment('func_return') %>
}<%- sc %>
<%- insertFragment('more') %>

<%- insertFragment('exports') %>
<%- `${tplExport('moduleExports')}${sc}` %>

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
