// Initializes the `<%= serviceName %>` service on path `/<%= path %>`. (Can be re-generated.)
<%- tplTsOnly([`import { App } from '../../${subFolderReverse}app.interface'${sc}`, '', '']) -%>
<%- insertFragment('createService', `${tplImports('createService', serviceModule, 'req')}`) %>
<%# -%>
<%# --- if-1 starts below. -%>
<% if(modelName) { -%>
<%- tplImports('createModel', `../../${subFolderReverse}models/${subFolder}${modelName}`) %>
<% } -%>
<%# --- if-1 ends above. -%>
<%- tplImports('hooks', `./${kebabName}.hooks`) %>
<%- insertFragment('imports') %>
<%- insertFragment('init') %>

<%- tplModuleExports(null, 'function (app) {', 'function (app: App) {') %>
<% if (modelName) { %>  const Model = createModel(app)<%- sc + '\n' %><% } %>  const paginate = app.get('paginate')<%- sc %>
  <%- insertFragment('func_init') %>

  const options = {
    <%- insertFragment('options_more') %>
<% if (modelName) { -%>
    Model,
<% } -%>
    paginate
  }<%- sc %>
  <%- insertFragment('options_change') %>

  // Initialize our service with any options it requires
  <%- insertFragment('extend', `  app.use('/${path}', createService(options))${sc}`) %>

  // Get our initialized service so that we can register hooks
  const service = app.service('<%= path %>')<%- sc %>

  service.hooks(hooks)<%- sc %>
  <%- insertFragment('func_return') %>
}<%- sc %>

<%- insertFragment('exports') %>
<%- `${tplExport('moduleExports')}${sc}` %>

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
