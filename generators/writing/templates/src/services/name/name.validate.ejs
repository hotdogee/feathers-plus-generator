/* <%- tplJsOrTs('eslint quotes: 0', 'tslint:disable:quotemark') %> */
// Validation definitions for validateSchema hook for service `<%= serviceName %>`. (Can be re-generated.)
<%- tplImports('{ validateSchema }', 'feathers-hooks-common') %>
<%- tplImports('merge', 'lodash.merge', 'req') %>
<%- tplImports('Ajv', 'ajv', 'req') %>
<%- insertFragment('imports') %>
<%- insertFragment('init', [
  `const ajv = new Ajv()${sc}
require('ajv-keywords/keywords/instanceof')(ajv)${sc}
ajv.addKeyword('coerce', {
  type: 'string',
  modifying: true,
  validate: (fn, data, ps, path, parent, key) => {
    parent[key] = fn(data)${sc}
    return true${sc}
  }
})${sc}`,
]) %>

<%- insertFragment('set_id_type', [
  `// ${lintDisableNextLineUnused}`,
  `const ID = '${primaryKey.idType === 'number' ? 'integer' : primaryKey.idType}'${sc}`,
]) %>

const base = merge({},
<% __jsonSchema = merge({}, feathersSpecs[serviceName]);
   delete __jsonSchema._extensions;
   __str = stringifyPlus(__jsonSchema).replace(/'ID'/g, 'ID')
     .split('\n').map(str => `  ${str}`).join('\n');
-%>
  <%- insertFragment('base', Object.keys(__jsonSchema).length === 0 ? undefined : `${__str}`.slice(0,-4)) %>
  <%- insertFragment('base_more', '  }') %>
)<%- sc %>
<%- insertFragment('base_change') %>

const create = merge({},
  <%- insertFragment('create_more', '  base') %>
)<%- sc %>

const update = merge({},
  <%- insertFragment('update_more', '  base') %>
)<%- sc %>

const patch = merge({},
  <%- insertFragment('patch_more', '  base') %>
)<%- sc %>
delete patch.required<%- sc %>
<%- insertFragment('all_change') %>

const validateCreate = <%- tplJsOrTs('options', '(options?: any)') %> => {
  <%- insertFragment('func_create', [
    `  return validateSchema(create, ajv, options)${sc}`,
  ]) %>
}<%- sc %>

const validateUpdate = <%- tplJsOrTs('options', '(options?: any)') %> => {
  <%- insertFragment('func_update', [
    `  return validateSchema(update, ajv, options)${sc}`,
  ]) %>
}<%- sc %>

const validatePatch = <%- tplJsOrTs('options', '(options?: any)') %> => {
  <%- insertFragment('func_patch', [
    `  return validateSchema(patch, ajv, options)${sc}`,
  ]) %>
}<%- sc %>

const quickValidate = <%- tplJsOrTs('(method, data, options)', '(method: string, data: any, options?: any)') %> => {
  try {
    if (method === 'create') { validateCreate(options)({ type: 'before', method: 'create', data }<%- tplTsOnly(' as any') -%>)<%- sc %> }
    if (method === 'update') { validateCreate(options)({ type: 'before', method: 'update', data }<%- tplTsOnly(' as any') -%>)<%- sc %> }
    if (method === 'patch') { validateCreate(options)({ type: 'before', method: 'patch', data }<%- tplTsOnly(' as any') -%>)<%- sc %> }
  } catch (err) {
    return err<%- sc %>
  }
}<%- sc %>
<%- insertFragment('validate_change') %>

<%- tplTsOnly(['// tslint:disable:trailing-comma', '']) -%>
const moduleExports = {
  <%- insertFragment('moduleExports', `  create,
  update,
  patch,
  validateCreate,
  validateUpdate,
  validatePatch,
  quickValidate`) %>
}<%- sc %>

<%- insertFragment('exports') %>
<%- `${tplExport('moduleExports')}${sc}` %>

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
